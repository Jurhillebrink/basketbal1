<<<<<<< Updated upstream
<<<<<<< Updated upstream
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
=======
newRow <- c("M", "FALSE", "2" ,"4", "5")
movie <- rbind(movie, newRow)
movie
movie <- cbind(movie, F4)
movie
dim(movie)
movie[2,]
movie[,3]
movie[3,5]
movie[5,3]
movie[3,5] <- NA
movie[5,3] <- NA
movie
moviedf <- data.frame(movie)
moviedf
moviedf[,3]
moviedf$F2 #$ om een column een naam te geven
mean(moviedf$F2)
mean(moviedf$F2, na.rm=TRUE) #remove NA, missing values verwijderen anders kan er geen mean worden uitgevoerd
as.numeric(moviedf$F2) #maakt naar alles naar numeric
mean(as.numeric(moviedf$F2), na.rm=TRUE)
moviedfNew <- data.frame(movie, stringsAsFactors =FALSE) # nog opzoeken
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2
mean(as.numeric(moviedfNew$F2), na.rm=TRUE)
as.numeric(moviedfNew$F3)
moviedfNew$F3
mean(as.numeric(moviedfNew$F3), na.rm=TRUE)
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2 <- as.numeric(moviedfNew$F2)
moviedfNew
moviedfNew$F3 <- as.numeric(moviedfNew$F3)
moviedfNew$F4 <- as.numeric(moviedfNew$F4)
as.numeric((moviedfNew$F1))
#as.numeric(as.logical(moviedfNew$F1))
movie <- list() #
moviedf <- list()
gender <- c("M", "F", "M", "M", "F", "F", "F")
gender
length(gender)
F1 <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE ,TRUE)
F1
F2 <- c(5,3,5,2,2,3,3)
F2
F3 <- c(3,5,1,8,4,2,6)
F3
F4 <- c(5,5,6,5,5,6,5)
F4
F3+F4
movie <- cbind(gender, F1)
movie
dim(movie)
movie <- cbind(movie, F2)
movie
movie <- cbind(movie, F3)
movie <- cbind(movie, F4)
movie
dim(movie)
newRow <- c("M", "FALSE", "2" ,"4", "5")
movie <- rbind(movie, newRow)
movie
movie <- cbind(movie, F4)
movie
dim(movie)
movie[2,]
movie[,3]
movie[3,5]
movie[5,3]
movie[3,5] <- NA
movie[5,3] <- NA
movie
moviedf <- data.frame(movie)
moviedf
moviedf[,3]
moviedf$F2 #$ om een column een naam te geven
mean(moviedf$F2)
mean(moviedf$F2, na.rm=TRUE) #remove NA, missing values verwijderen anders kan er geen mean worden uitgevoerd
as.numeric(moviedf$F2) #maakt naar alles naar numeric
mean(as.numeric(moviedf$F2), na.rm=TRUE)
moviedfNew <- data.frame(movie, stringsAsFactors =FALSE) # nog opzoeken
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2
mean(as.numeric(moviedfNew$F2), na.rm=TRUE)
as.numeric(moviedfNew$F3)
moviedfNew$F3
mean(as.numeric(moviedfNew$F3), na.rm=TRUE)
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2 <- as.numeric(moviedfNew$F2)
moviedfNew
moviedfNew$F3 <- as.numeric(moviedfNew$F3)
moviedfNew$F4 <- as.numeric(moviedfNew$F4)
as.numeric(moviedfNew$F1)
#as.numeric(as.logical(moviedfNew$F1))
movie <- list() #
moviedf <- list()
gender <- c("M", "F", "M", "M", "F", "F", "F")
gender
length(gender)
F1 <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE ,TRUE)
F1
F2 <- c(5,3,5,2,2,3,3)
F2
F3 <- c(3,5,1,8,4,2,6)
F3
F4 <- c(5,5,6,5,5,6,5)
F4
F3+F4
movie <- cbind(gender, F1)
movie
dim(movie)
movie <- cbind(movie, F2)
movie
movie <- cbind(movie, F3)
movie <- cbind(movie, F4)
movie
dim(movie)
newRow <- c("M", "FALSE", "2" ,"4", "5")
movie <- rbind(movie, newRow)
movie
movie <- cbind(movie, F4)
movie
dim(movie)
movie[2,]
movie[,3]
movie[3,5]
movie[5,3]
movie[3,5] <- NA
movie[5,3] <- NA
movie
moviedf <- data.frame(movie)
moviedf
moviedf[,3]
moviedf$F2 #$ om een column een naam te geven
mean(moviedf$F2)
mean(moviedf$F2, na.rm=TRUE) #remove NA, missing values verwijderen anders kan er geen mean worden uitgevoerd
as.numeric(moviedf$F2) #maakt naar alles naar numeric
mean(as.numeric(moviedf$F2), na.rm=TRUE)
moviedfNew <- data.frame(movie, stringsAsFactors =FALSE) # nog opzoeken
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2
mean(as.numeric(moviedfNew$F2), na.rm=TRUE)
as.numeric(moviedfNew$F3)
moviedfNew$F3
mean(as.numeric(moviedfNew$F3), na.rm=TRUE)
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2 <- as.numeric(moviedfNew$F2)
moviedfNew
moviedfNew$F3 <- as.numeric(moviedfNew$F3)
moviedfNew$F4 <- as.numeric(moviedfNew$F4)
#as.numeric(moviedfNew$F1)
moviedfNew$F1 <- as.numeric(as.logical(moviedfNew$F1))
moviedfNew[,3:5] <- lapply(moviedfNew[,3:5],as.numeric) #lapply alleen gebruiken
moviedfNew
movie <- list() #
moviedf <- list()
gender <- c("M", "F", "M", "M", "F", "F", "F")
gender
length(gender)
F1 <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE ,TRUE)
F1
F2 <- c(5,3,5,2,2,3,3)
F2
F3 <- c(3,5,1,8,4,2,6)
F3
F4 <- c(5,5,6,5,5,6,5)
F4
F3+F4
movie <- cbind(gender, F1)
movie
dim(movie)
movie <- cbind(movie, F2)
movie
movie <- cbind(movie, F3)
movie <- cbind(movie, F4)
movie
dim(movie)
newRow <- c("M", "FALSE", "2" ,"4", "5")
movie <- rbind(movie, newRow)
movie
movie <- cbind(movie, F4)
movie
dim(movie)
movie[2,]
movie[,3]
movie[3,5]
movie[5,3]
movie[3,5] <- NA
movie[5,3] <- NA
movie
moviedf <- data.frame(movie)
moviedf
moviedf[,3]
moviedf$F2 #$ om een column een naam te geven
mean(moviedf$F2)
mean(moviedf$F2, na.rm=TRUE) #remove NA, missing values verwijderen anders kan er geen mean worden uitgevoerd
as.numeric(moviedf$F2) #maakt naar alles naar numeric
mean(as.numeric(moviedf$F2), na.rm=TRUE)
moviedfNew <- data.frame(movie, stringsAsFactors =FALSE) # nog opzoeken
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2
mean(as.numeric(moviedfNew$F2), na.rm=TRUE)
as.numeric(moviedfNew$F3)
moviedfNew$F3
mean(as.numeric(moviedfNew$F3), na.rm=TRUE)
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2 <- as.numeric(moviedfNew$F2)
moviedfNew
moviedfNew$F3 <- as.numeric(moviedfNew$F3)
moviedfNew$F4 <- as.numeric(moviedfNew$F4)
#as.numeric(moviedfNew$F1)
moviedfNew$F1 <- as.numeric(as.logical(moviedfNew$F1))
moviedfNew[,3:5] <- lapply(moviedfNew[,3:5],as.numeric) #lapply alleen gebruiken
moviedfNew
colMeans(moviedfNew[, 2:5], na.rm=TRUE)
movie <- list() #
moviedf <- list()
gender <- c("M", "F", "M", "M", "F", "F", "F")
gender
length(gender)
F1 <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE ,TRUE)
F1
F2 <- c(5,3,5,2,2,3,3)
F2
F3 <- c(3,5,1,8,4,2,6)
F3
F4 <- c(5,5,6,5,5,6,5)
F4
F3+F4
movie <- cbind(gender, F1)
movie
dim(movie)
movie <- cbind(movie, F2)
movie
movie <- cbind(movie, F3)
movie <- cbind(movie, F4)
movie
dim(movie)
newRow <- c("M", "FALSE", "2" ,"4", "5")
movie <- rbind(movie, newRow)
movie
movie <- cbind(movie, F4)
movie
dim(movie)
movie[2,]
movie[,3]
movie[3,5]
movie[5,3]
movie[3,5] <- NA
movie[5,3] <- NA
movie
moviedf <- data.frame(movie)
moviedf
moviedf[,3]
moviedf$F2 #$ om een column een naam te geven
mean(moviedf$F2)
mean(moviedf$F2, na.rm=TRUE) #remove NA, missing values verwijderen anders kan er geen mean worden uitgevoerd
as.numeric(moviedf$F2) #maakt naar alles naar numeric
mean(as.numeric(moviedf$F2), na.rm=TRUE)
moviedfNew <- data.frame(movie, stringsAsFactors =FALSE) # nog opzoeken
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2
mean(as.numeric(moviedfNew$F2), na.rm=TRUE)
as.numeric(moviedfNew$F3)
moviedfNew$F3
mean(as.numeric(moviedfNew$F3), na.rm=TRUE)
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2 <- as.numeric(moviedfNew$F2)
moviedfNew
moviedfNew$F3 <- as.numeric(moviedfNew$F3)
moviedfNew$F4 <- as.numeric(moviedfNew$F4)
#as.numeric(moviedfNew$F1)
moviedfNew$F1 <- as.numeric(as.logical(moviedfNew$F1))
moviedfNew[,3:5] <- lapply(moviedfNew[,3:5],as.numeric) #lapply alleen gebruiken
moviedfNew
colMeans(moviedfNew[, 2:5], na.rm=TRUE) #rekent gemiddelde uit van alle colummen. nog niet genormaliseerd!
normalize <- function(vector){
normalizedvector <- (vector-min (vector, na.rm=TRUE))/max(vector, na.rm=TRUE)
return(normalizedvector)
}
movie <- list() #
moviedf <- list()
gender <- c("M", "F", "M", "M", "F", "F", "F")
gender
length(gender)
F1 <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE ,TRUE)
F1
F2 <- c(5,3,5,2,2,3,3)
F2
F3 <- c(3,5,1,8,4,2,6)
F3
F4 <- c(5,5,6,5,5,6,5)
F4
F3+F4
movie <- cbind(gender, F1)
movie
dim(movie)
movie <- cbind(movie, F2)
movie
movie <- cbind(movie, F3)
movie <- cbind(movie, F4)
movie
dim(movie)
newRow <- c("M", "FALSE", "2" ,"4", "5")
movie <- rbind(movie, newRow)
movie
movie <- cbind(movie, F4)
movie
dim(movie)
movie[2,]
movie[,3]
movie[3,5]
movie[5,3]
movie[3,5] <- NA
movie[5,3] <- NA
movie
moviedf <- data.frame(movie)
moviedf
moviedf[,3]
moviedf$F2 #$ om een column een naam te geven
mean(moviedf$F2)
mean(moviedf$F2, na.rm=TRUE) #remove NA, missing values verwijderen anders kan er geen mean worden uitgevoerd
as.numeric(moviedf$F2) #maakt naar alles naar numeric
mean(as.numeric(moviedf$F2), na.rm=TRUE)
moviedfNew <- data.frame(movie, stringsAsFactors =FALSE) # nog opzoeken
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2
mean(as.numeric(moviedfNew$F2), na.rm=TRUE)
as.numeric(moviedfNew$F3)
moviedfNew$F3
mean(as.numeric(moviedfNew$F3), na.rm=TRUE)
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2 <- as.numeric(moviedfNew$F2)
moviedfNew
moviedfNew$F3 <- as.numeric(moviedfNew$F3)
moviedfNew$F4 <- as.numeric(moviedfNew$F4)
#as.numeric(moviedfNew$F1)
moviedfNew$F1 <- as.numeric(as.logical(moviedfNew$F1))
moviedfNew[,3:5] <- lapply(moviedfNew[,3:5],as.numeric) #lapply alleen gebruiken
moviedfNew
colMeans(moviedfNew[, 2:5], na.rm=TRUE) #rekent gemiddelde uit van alle colummen. nog niet genormaliseerd!
normalize <- function(vector){
normalizedvector <- (vector-min (vector, na.rm=TRUE))/max(vector, na.rm=TRUE)
return(normalizedvector)
>>>>>>> Stashed changes
}
normalize(moviedfNew$F2)
movie <- list() #
moviedf <- list()
gender <- c("M", "F", "M", "M", "F", "F", "F")
gender
length(gender)
F1 <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE ,TRUE)
F1
F2 <- c(5,3,5,2,2,3,3)
F2
F3 <- c(3,5,1,8,4,2,6)
F3
F4 <- c(5,5,6,5,5,6,5)
F4
F3+F4
movie <- cbind(gender, F1)
movie
dim(movie)
movie <- cbind(movie, F2)
movie
movie <- cbind(movie, F3)
movie <- cbind(movie, F4)
movie
dim(movie)
newRow <- c("M", "FALSE", "2" ,"4", "5")
movie <- rbind(movie, newRow)
movie
movie <- cbind(movie, F4)
movie
dim(movie)
movie[2,]
movie[,3]
movie[3,5]
movie[5,3]
movie[3,5] <- NA
movie[5,3] <- NA
movie
moviedf <- data.frame(movie)
moviedf
moviedf[,3]
moviedf$F2 #$ om een column een naam te geven
mean(moviedf$F2)
mean(moviedf$F2, na.rm=TRUE) #remove NA, missing values verwijderen anders kan er geen mean worden uitgevoerd
as.numeric(moviedf$F2) #maakt naar alles naar numeric
mean(as.numeric(moviedf$F2), na.rm=TRUE)
moviedfNew <- data.frame(movie, stringsAsFactors =FALSE) # nog opzoeken
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2
mean(as.numeric(moviedfNew$F2), na.rm=TRUE)
as.numeric(moviedfNew$F3)
moviedfNew$F3
mean(as.numeric(moviedfNew$F3), na.rm=TRUE)
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2 <- as.numeric(moviedfNew$F2)
moviedfNew
moviedfNew$F3 <- as.numeric(moviedfNew$F3)
moviedfNew$F4 <- as.numeric(moviedfNew$F4)
#as.numeric(moviedfNew$F1)
moviedfNew$F1 <- as.numeric(as.logical(moviedfNew$F1))
moviedfNew[,3:5] <- lapply(moviedfNew[,3:5],as.numeric) #lapply alleen gebruiken
moviedfNew
colMeans(moviedfNew[, 2:5], na.rm=TRUE) #rekent gemiddelde uit van alle colummen. nog niet genormaliseerd!
normalize <- function(vector){
normalizedvector <- (vector-min (vector, na.rm=TRUE))/max(vector, na.rm=TRUE)
return(normalizedvector)
}
normalize(moviedfNew$F2)
moviedfNew[,2:5] < lapply(moviedfNew[,2:5], normalize)
movie <- list() #
moviedf <- list()
gender <- c("M", "F", "M", "M", "F", "F", "F")
gender
length(gender)
F1 <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE ,TRUE)
F1
F2 <- c(5,3,5,2,2,3,3)
F2
F3 <- c(3,5,1,8,4,2,6)
F3
F4 <- c(5,5,6,5,5,6,5)
F4
F3+F4
movie <- cbind(gender, F1)
movie
dim(movie)
movie <- cbind(movie, F2)
movie
movie <- cbind(movie, F3)
movie <- cbind(movie, F4)
movie
dim(movie)
newRow <- c("M", "FALSE", "2" ,"4", "5")
movie <- rbind(movie, newRow)
movie
movie <- cbind(movie, F4)
movie
dim(movie)
movie[2,]
movie[,3]
movie[3,5]
movie[5,3]
movie[3,5] <- NA
movie[5,3] <- NA
movie
moviedf <- data.frame(movie)
moviedf
moviedf[,3]
moviedf$F2 #$ om een column een naam te geven
mean(moviedf$F2)
mean(moviedf$F2, na.rm=TRUE) #remove NA, missing values verwijderen anders kan er geen mean worden uitgevoerd
as.numeric(moviedf$F2) #maakt naar alles naar numeric
mean(as.numeric(moviedf$F2), na.rm=TRUE)
moviedfNew <- data.frame(movie, stringsAsFactors =FALSE) # nog opzoeken
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2
mean(as.numeric(moviedfNew$F2), na.rm=TRUE)
as.numeric(moviedfNew$F3)
moviedfNew$F3
mean(as.numeric(moviedfNew$F3), na.rm=TRUE)
moviedfNew
as.numeric(moviedfNew$F2)
moviedfNew$F2 <- as.numeric(moviedfNew$F2)
moviedfNew
moviedfNew$F3 <- as.numeric(moviedfNew$F3)
moviedfNew$F4 <- as.numeric(moviedfNew$F4)
#as.numeric(moviedfNew$F1)
moviedfNew$F1 <- as.numeric(as.logical(moviedfNew$F1))
moviedfNew[,3:5] <- lapply(moviedfNew[,3:5],as.numeric) #lapply alleen gebruiken
moviedfNew
colMeans(moviedfNew[, 2:5], na.rm=TRUE) #rekent gemiddelde uit van alle colummen. nog niet genormaliseerd!
normalize <- function(vector){
normalizedvector <- (vector-min (vector, na.rm=TRUE))/max(vector, na.rm=TRUE)
return(normalizedvector)
}
<<<<<<< Updated upstream
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
runApp()
shiny::runApp()
>>>>>>> a6f6e1bc556ea7def0c70be6d672018952fde889
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinyWidgets",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
"RODBC",
"openssl",
"V8",
"DT",
"shinyWidgets",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
runApp()
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinyWidgets",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
"RODBC",
"openssl",
"V8",
"DT",
"shinyWidgets",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
shiny::runApp()
=======
normalize(moviedfNew$F2)
moviedfNew[,2:5] < lapply(moviedfNew[,2:5], normalize)
moviedfNew
install.packages('shiny')
library(shiny)
ui <- fluidPage("Hello world Jur")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/r scripts met uitleg code/Rshiy1.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/01 HelloWorld.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/02 TwoReactionsOneEvent.R')
runApp('C:/Users/2018/Desktop/R')
runApp('C:/Users/2018/Desktop/R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/05 ObserveEvent.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/06A Observe.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/09 LeafletReactive.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/09 LeafletReactive.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/09 LeafletReactive.R')
shiny::runApp('C:/Big data/basketbal1')
>>>>>>> Stashed changes
=======
x <- 3
x*xx
x*x
p <- list(5:7, 8)
P
p
sum_of_squares <- function(x) {
sum(x ^ 2)
}
lst <- list(c(10, 4, 7), c(3, 2, 5))
sapply(
, sum_of_squares)
sum_of_squares <- function(x) {
sum(x ^ 2)
}
lst <- list(c(10, 4, 7), c(3, 2, 5))
sapply(
1, sum_of_squares)
sum_of_squares <- function(x) {
sum(x ^ 2)
}
lst <- list(c(10, 4, 7), c(3, 2, 5))
sapply(
2, sum_of_squares)
sapply(2, sum_of_squares)
sapply(lst, sum_of_squares)
c(FALSE, TRUE) || c(FALSE, FALSE)
c(FALSE, TRUE) || c(TRUE, FALSE)
c(FALSE, TRUE) || c(FALSE, TRUE)
##needed for datamanipulation
install.packages("dplyr")
install.packages("DBI")
install.packages("rJava")
install.packages("RJBDC")
install.packages("sqldf")
shiny::runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
View(ui)
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
shiny::runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
shiny::runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
install.packages(c("BH", "DBI", "hms", "httpuv", "openssl", "pillar", "rlang", "selectr", "stringr", "tidyselect", "XML", "yaml"))
install.packages(c("BH", "DBI", "hms", "httpuv", "openssl", "pillar", "rlang", "selectr", "stringr", "tidyselect", "XML", "yaml"))
detach("package:RJDBC", unload=TRUE)
detach("package:DBI", unload=TRUE)
detach("package:rJava", unload=TRUE)
install.packages(c("BH", "DBI", "hms", "httpuv", "openssl", "pillar", "rlang", "selectr", "stringr", "tidyselect", "XML", "yaml"))
shiny::runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
>>>>>>> Stashed changes
